package me.madcat.features.modules.exploit;

import me.madcat.features.modules.movement.Anchor;
import net.minecraft.util.math.BlockPos;
import net.minecraft.network.play.client.CPacketEntityAction;
import me.madcat.util.MathUtil;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.init.Blocks;
import net.minecraft.util.math.RayTraceResult;
import net.minecraft.util.math.Vec3d;
import me.madcat.features.setting.Setting;
import me.madcat.features.modules.Module;

public class Phase2 extends Module
{
    public final Setting<Boolean> Phase2Check;
    public final Setting<NoClipMode> noClipMode;
    public final Setting<Boolean> fallPacket;
    public final Setting<Boolean> sprintPacket;
    public final Setting<Boolean> instantWalk;
    public final Setting<Boolean> selfAnvil;
    public final Setting<Boolean> antiVoid;
    public final Setting<Boolean> clip;
    public final Setting<Boolean> clipRange;
    public final Setting<Boolean> clipDelay;
    public final Setting<Integer> antiVoidHeight;
    public final Setting<Double> instantWalkSpeed;
    public final Setting<Double> Phase2Speed;
    public final Setting<Boolean> downOnShift;
    public final Setting<Boolean> stopMotion;
    public final Setting<Integer> stopMotionDelay;
    int delay;

    public Phase2() {
        super("Phase2", "Fuck wall", Category.EXPLOIT);
        this.Phase2Check = this.register(new Setting("Only In Block", false));
        this.noClipMode = this.register(new Setting("NoClipMode", NoClipMode.Bypass));
        this.fallPacket = this.register(new Setting("Fall Packet", true));
        this.sprintPacket = this.register(new Setting("Sprint Packet", true));
        this.instantWalk = this.register(new Setting("Instant Walk", false));
        this.selfAnvil = this.register(new Setting("Self Anvil", false));
        this.antiVoid = this.register(new Setting("Anti Void", false));
        this.clip = this.register(new Setting("Clip", true));
        this.clipRange = this.register(new Setting("Clip Range", 1, 1, 5));
        this.clipDelay = this.register(new Setting("Clip Delay", 1, 1, 150));
        this.antiVoidHeight = this.register(new Setting("Anti Void Height", 5, 1, 100));
        this.instantWalkSpeed = this.register(new Setting("Instant Speed", 0.1, 0.1, 2.0));
        this.Phase2Speed = this.register(new Setting("Phase2 Walk Speed", 0.1, 0.1, 70.0));
        this.downOnShift = this.register(new Setting("Phase2 Down When Crouch", true));
        this.stopMotion = this.register(new Setting("Attempt Clips", true));
        this.stopMotionDelay = this.register(new Setting("Attempt Clips Delay", 5, 0, 20));
        this.delay = 0;
    }

    @Override
    public void onUpdate() {
        ++this.delay;
        final double n = this.Phase2Speed.getValue() / 1000.0;
        final double n2 = this.instantWalkSpeed.getValue() / 10.0;
        if (this.antiVoid.getValue() && Phase2.mc.player.posY <= this.antiVoidHeight.getValue()) {
            final RayTraceResult rayTraceBlocks = Phase2.mc.world.rayTraceBlocks(Phase2.mc.player.getPositionVector(), new Vec3d(Phase2.mc.player.posX, 0.0, Phase2.mc.player.posZ), false, false, false);
            if (rayTraceBlocks == null || rayTraceBlocks.typeOfHit != RayTraceResult.Type.BLOCK) {
                Phase2.mc.player.setVelocity(0.0, 0.0, 0.0);
            }
        }
        if (this.Phase2Check.getValue()) {
            if ((Phase2.mc.gameSettings.keyBindForward.isKeyDown() || Phase2.mc.gameSettings.keyBindRight.isKeyDown() || Phase2.mc.gameSettings.keyBindLeft.isKeyDown() || Phase2.mc.gameSettings.keyBindBack.isKeyDown() || Phase2.mc.gameSettings.keyBindSneak.isKeyDown()) && ((!this.eChestCheck() && !Phase2.mc.world.getBlockState(this.getPlayerPos()).getBlock().equals(Blocks.AIR)) || !Phase2.mc.world.getBlockState(this.getPlayerPos().up()).getBlock().equals(Blocks.AIR))) {
                if (Phase2.mc.player.collidedVertically && Phase2.mc.gameSettings.keyBindSneak.isPressed() && Phase2.mc.player.isSneaking()) {
                    final double[] motion = this.getMotion(n);
                    if (this.downOnShift.getValue() && Phase2.mc.player.collidedVertically && Phase2.mc.gameSettings.keyBindSneak.isKeyDown()) {
                        Phase2.mc.player.connection.sendPacket(new CPacketPlayer.PositionRotation(Phase2.mc.player.posX + motion[0], Phase2.mc.player.posY - 0.0424, Phase2.mc.player.posZ + motion[1], Phase2.mc.player.rotationYaw, Phase2.mc.player.rotationPitch, false));
                    }
                    else {
                        Phase2.mc.player.connection.sendPacket(new CPacketPlayer.PositionRotation(Phase2.mc.player.posX + motion[0], Phase2.mc.player.posY, Phase2.mc.player.posZ + motion[1], Phase2.mc.player.rotationYaw, Phase2.mc.player.rotationPitch, false));
                    }
                    if (this.noClipMode.getValue() == NoClipMode.Fall) {
                        Phase2.mc.player.connection.sendPacket(new CPacketPlayer.PositionRotation(Phase2.mc.player.posX, -1300.0, Phase2.mc.player.posZ, Phase2.mc.player.rotationYaw * -5.0f, Phase2.mc.player.rotationPitch * -5.0f, true));
                    }
                    if (this.noClipMode.getValue() == NoClipMode.NoClip) {
                        Phase2.mc.player.setVelocity(0.0, 0.0, 0.0);
                        if (Phase2.mc.gameSettings.keyBindForward.isKeyDown() || Phase2.mc.gameSettings.keyBindBack.isKeyDown() || Phase2.mc.gameSettings.keyBindLeft.isKeyDown() || Phase2.mc.gameSettings.keyBindRight.isKeyDown()) {
                            final double[] directionSpeed = MathUtil.directionSpeed(0.05999999865889549);
                            Phase2.mc.player.connection.sendPacket(new CPacketPlayer.Position(Phase2.mc.player.posX + directionSpeed[0], Phase2.mc.player.posY, Phase2.mc.player.posZ + directionSpeed[1], Phase2.mc.player.onGround));
                            Phase2.mc.player.connection.sendPacket(new CPacketPlayer.Position(Phase2.mc.player.posX, 0.0, Phase2.mc.player.posZ, Phase2.mc.player.onGround));
                        }
                        if (Phase2.mc.gameSettings.keyBindSneak.isKeyDown()) {
                            Phase2.mc.player.connection.sendPacket(new CPacketPlayer.Position(Phase2.mc.player.posX, Phase2.mc.player.posY - 0.05999999865889549, Phase2.mc.player.posZ, Phase2.mc.player.onGround));
                            Phase2.mc.player.connection.sendPacket(new CPacketPlayer.Position(Phase2.mc.player.posX, 0.0, Phase2.mc.player.posZ, Phase2.mc.player.onGround));
                        }
                        if (Phase2.mc.gameSettings.keyBindJump.isKeyDown()) {
                            Phase2.mc.player.connection.sendPacket(new CPacketPlayer.Position(Phase2.mc.player.posX, Phase2.mc.player.posY + 0.05999999865889549, Phase2.mc.player.posZ, Phase2.mc.player.onGround));
                            Phase2.mc.player.connection.sendPacket(new CPacketPlayer.Position(Phase2.mc.player.posX, 0.0, Phase2.mc.player.posZ, Phase2.mc.player.onGround));
                        }
                    }
                    if (this.noClipMode.getValue() == NoClipMode.Bypass) {
                        Phase2.mc.player.noClip = true;
                    }
                    if (this.fallPacket.getValue()) {
                        Phase2.mc.player.connection.sendPacket(new CPacketEntityAction(Phase2.mc.player, CPacketEntityAction.Action.STOP_RIDING_JUMP));
                    }
                    if (this.sprintPacket.getValue()) {
                        Phase2.mc.player.connection.sendPacket(new CPacketEntityAction(Phase2.mc.player, CPacketEntityAction.Action.START_SPRINTING));
                    }
                    if (this.downOnShift.getValue() && Phase2.mc.player.collidedVertically && Phase2.mc.gameSettings.keyBindSneak.isKeyDown()) {
                        Phase2.mc.player.setPosition(Phase2.mc.player.posX + motion[0], Phase2.mc.player.posY - 0.0424, Phase2.mc.player.posZ + motion[1]);
                    }
                    else {
                        Phase2.mc.player.setPosition(Phase2.mc.player.posX + motion[0], Phase2.mc.player.posY, Phase2.mc.player.posZ + motion[1]);
                    }
                    Phase2.mc.player.motionZ = 0.0;
                    Phase2.mc.player.motionY = 0.0;
                    Phase2.mc.player.motionX = 0.0;
                    Phase2.mc.player.noClip = true;
                }
                Label_2486: {
                    if (Phase2.mc.player.collidedHorizontally && this.stopMotion.getValue()) {
                        if (this.delay < this.stopMotionDelay.getValue()) {
                            break Label_2486;
                        }
                    }
                    else if (!Phase2.mc.player.collidedHorizontally) {
                        break Label_2486;
                    }
                    final double[] motion2 = this.getMotion(n);
                    if (this.downOnShift.getValue() && Phase2.mc.player.collidedVertically && Phase2.mc.gameSettings.keyBindSneak.isKeyDown()) {
                        Phase2.mc.player.connection.sendPacket(new CPacketPlayer.PositionRotation(Phase2.mc.player.posX + motion2[0], Phase2.mc.player.posY - 0.1, Phase2.mc.player.posZ + motion2[1], Phase2.mc.player.rotationYaw, Phase2.mc.player.rotationPitch, false));
                    }
                    else {
                        Phase2.mc.player.connection.sendPacket(new CPacketPlayer.PositionRotation(Phase2.mc.player.posX + motion2[0], Phase2.mc.player.posY, Phase2.mc.player.posZ + motion2[1], Phase2.mc.player.rotationYaw, Phase2.mc.player.rotationPitch, false));
                    }
                    if (this.noClipMode.getValue() == NoClipMode.Fall) {
                        Phase2.mc.player.connection.sendPacket(new CPacketPlayer.PositionRotation(Phase2.mc.player.posX, -1300.0, Phase2.mc.player.posZ, Phase2.mc.player.rotationYaw * -5.0f, Phase2.mc.player.rotationPitch * -5.0f, true));
                    }
                    if (this.noClipMode.getValue() == NoClipMode.NoClip) {
                        Phase2.mc.player.setVelocity(0.0, 0.0, 0.0);
                        if (Phase2.mc.gameSettings.keyBindForward.isKeyDown() || Phase2.mc.gameSettings.keyBindBack.isKeyDown() || Phase2.mc.gameSettings.keyBindLeft.isKeyDown() || Phase2.mc.gameSettings.keyBindRight.isKeyDown()) {
                            final double[] directionSpeed2 = MathUtil.directionSpeed(0.05999999865889549);
                            Phase2.mc.player.connection.sendPacket(new CPacketPlayer.Position(Phase2.mc.player.posX + directionSpeed2[0], Phase2.mc.player.posY, Phase2.mc.player.posZ + directionSpeed2[1], Phase2.mc.player.onGround));
                            Phase2.mc.player.connection.sendPacket(new CPacketPlayer.Position(Phase2.mc.player.posX, 0.0, Phase2.mc.player.posZ, Phase2.mc.player.onGround));
                        }
                        if (Phase2.mc.gameSettings.keyBindSneak.isKeyDown()) {
                            Phase2.mc.player.connection.sendPacket(new CPacketPlayer.Position(Phase2.mc.player.posX, Phase2.mc.player.posY - 0.05999999865889549, Phase2.mc.player.posZ, Phase2.mc.player.onGround));
                            Phase2.mc.player.connection.sendPacket(new CPacketPlayer.Position(Phase2.mc.player.posX, 0.0, Phase2.mc.player.posZ, Phase2.mc.player.onGround));
                        }
                        if (Phase2.mc.gameSettings.keyBindJump.isKeyDown()) {
                            Phase2.mc.player.connection.sendPacket(new CPacketPlayer.Position(Phase2.mc.player.posX, Phase2.mc.player.posY + 0.05999999865889549, Phase2.mc.player.posZ, Phase2.mc.player.onGround));
                            Phase2.mc.player.connection.sendPacket(new CPacketPlayer.Position(Phase2.mc.player.posX, 0.0, Phase2.mc.player.posZ, Phase2.mc.player.onGround));
                        }
                    }
                    if (this.noClipMode.getValue() == NoClipMode.Bypass) {
                        Phase2.mc.player.noClip = true;
                    }
                    if (this.fallPacket.getValue()) {
                        Phase2.mc.player.connection.sendPacket(new CPacketEntityAction(Phase2.mc.player, CPacketEntityAction.Action.STOP_RIDING_JUMP));
                    }
                    if (this.sprintPacket.getValue()) {
                        Phase2.mc.player.connection.sendPacket(new CPacketEntityAction(Phase2.mc.player, CPacketEntityAction.Action.START_SPRINTING));
                    }
                    if (this.downOnShift.getValue() && Phase2.mc.player.collidedVertically && Phase2.mc.gameSettings.keyBindSneak.isKeyDown()) {
                        Phase2.mc.player.setPosition(Phase2.mc.player.posX + motion2[0], Phase2.mc.player.posY - 0.1, Phase2.mc.player.posZ + motion2[1]);
                    }
                    else {
                        Phase2.mc.player.setPosition(Phase2.mc.player.posX + motion2[0], Phase2.mc.player.posY, Phase2.mc.player.posZ + motion2[1]);
                    }
                    Phase2.mc.player.motionZ = 0.0;
                    Phase2.mc.player.motionY = 0.0;
                    Phase2.mc.player.motionX = 0.0;
                    Phase2.mc.player.noClip = true;
                    this.delay = 0;
                    return;
                }
                if (this.instantWalk.getValue()) {
                    final double[] directionSpeed3 = MathUtil.directionSpeed(n2);
                    Phase2.mc.player.motionX = directionSpeed3[0];
                    Phase2.mc.player.motionZ = directionSpeed3[1];
                }
            }
        }
        else if (Phase2.mc.gameSettings.keyBindForward.isKeyDown() || Phase2.mc.gameSettings.keyBindRight.isKeyDown() || Phase2.mc.gameSettings.keyBindLeft.isKeyDown() || Phase2.mc.gameSettings.keyBindBack.isKeyDown() || Phase2.mc.gameSettings.keyBindSneak.isKeyDown()) {
            if (Phase2.mc.player.collidedVertically && Phase2.mc.gameSettings.keyBindSneak.isPressed() && Phase2.mc.player.isSneaking()) {
                final double[] motion3 = this.getMotion(n);
                if (this.downOnShift.getValue() && Phase2.mc.player.collidedVertically && Phase2.mc.gameSettings.keyBindSneak.isKeyDown()) {
                    Phase2.mc.player.connection.sendPacket(new CPacketPlayer.PositionRotation(Phase2.mc.player.posX + motion3[0], Phase2.mc.player.posY - 0.0424, Phase2.mc.player.posZ + motion3[1], Phase2.mc.player.rotationYaw, Phase2.mc.player.rotationPitch, false));
                }
                else {
                    Phase2.mc.player.connection.sendPacket(new CPacketPlayer.PositionRotation(Phase2.mc.player.posX + motion3[0], Phase2.mc.player.posY, Phase2.mc.player.posZ + motion3[1], Phase2.mc.player.rotationYaw, Phase2.mc.player.rotationPitch, false));
                }
                if (this.noClipMode.getValue() == NoClipMode.Fall) {
                    Phase2.mc.player.connection.sendPacket(new CPacketPlayer.PositionRotation(Phase2.mc.player.posX, -1300.0, Phase2.mc.player.posZ, Phase2.mc.player.rotationYaw * -5.0f, Phase2.mc.player.rotationPitch * -5.0f, true));
                }
                if (this.noClipMode.getValue() == NoClipMode.NoClip) {
                    Phase2.mc.player.setVelocity(0.0, 0.0, 0.0);
                    if (Phase2.mc.gameSettings.keyBindForward.isKeyDown() || Phase2.mc.gameSettings.keyBindBack.isKeyDown() || Phase2.mc.gameSettings.keyBindLeft.isKeyDown() || Phase2.mc.gameSettings.keyBindRight.isKeyDown()) {
                        final double[] directionSpeed4 = MathUtil.directionSpeed(0.05999999865889549);
                        Phase2.mc.player.connection.sendPacket(new CPacketPlayer.Position(Phase2.mc.player.posX + directionSpeed4[0], Phase2.mc.player.posY, Phase2.mc.player.posZ + directionSpeed4[1], Phase2.mc.player.onGround));
                        Phase2.mc.player.connection.sendPacket(new CPacketPlayer.Position(Phase2.mc.player.posX, 0.0, Phase2.mc.player.posZ, Phase2.mc.player.onGround));
                    }
                    if (Phase2.mc.gameSettings.keyBindSneak.isKeyDown()) {
                        Phase2.mc.player.connection.sendPacket(new CPacketPlayer.Position(Phase2.mc.player.posX, Phase2.mc.player.posY - 0.05999999865889549, Phase2.mc.player.posZ, Phase2.mc.player.onGround));
                        Phase2.mc.player.connection.sendPacket(new CPacketPlayer.Position(Phase2.mc.player.posX, 0.0, Phase2.mc.player.posZ, Phase2.mc.player.onGround));
                    }
                    if (Phase2.mc.gameSettings.keyBindJump.isKeyDown()) {
                        Phase2.mc.player.connection.sendPacket(new CPacketPlayer.Position(Phase2.mc.player.posX, Phase2.mc.player.posY + 0.05999999865889549, Phase2.mc.player.posZ, Phase2.mc.player.onGround));
                        Phase2.mc.player.connection.sendPacket(new CPacketPlayer.Position(Phase2.mc.player.posX, 0.0, Phase2.mc.player.posZ, Phase2.mc.player.onGround));
                    }
                }
                if (this.noClipMode.getValue() == NoClipMode.Bypass) {
                    Phase2.mc.player.noClip = true;
                }
                if (this.fallPacket.getValue()) {
                    Phase2.mc.player.connection.sendPacket(new CPacketEntityAction(Phase2.mc.player, CPacketEntityAction.Action.STOP_RIDING_JUMP));
                }
                if (this.sprintPacket.getValue()) {
                    Phase2.mc.player.connection.sendPacket(new CPacketEntityAction(Phase2.mc.player, CPacketEntityAction.Action.START_SPRINTING));
                }
                if (this.downOnShift.getValue() && Phase2.mc.player.collidedVertically && Phase2.mc.gameSettings.keyBindSneak.isKeyDown()) {
                    Phase2.mc.player.setPosition(Phase2.mc.player.posX + motion3[0], Phase2.mc.player.posY - 0.0424, Phase2.mc.player.posZ + motion3[1]);
                }
                else {
                    Phase2.mc.player.setPosition(Phase2.mc.player.posX + motion3[0], Phase2.mc.player.posY, Phase2.mc.player.posZ + motion3[1]);
                }
                Phase2.mc.player.motionZ = 0.0;
                Phase2.mc.player.motionY = 0.0;
                Phase2.mc.player.motionX = 0.0;
                Phase2.mc.player.noClip = true;
            }
            Label_4777: {
                if (Phase2.mc.player.collidedHorizontally && this.stopMotion.getValue()) {
                    if (this.delay < this.stopMotionDelay.getValue()) {
                        break Label_4777;
                    }
                }
                else if (!Phase2.mc.player.collidedHorizontally) {
                    break Label_4777;
                }
                final double[] motion4 = this.getMotion(n);
                if (this.downOnShift.getValue() && Phase2.mc.player.collidedVertically && Phase2.mc.gameSettings.keyBindSneak.isKeyDown()) {
                    Phase2.mc.player.connection.sendPacket(new CPacketPlayer.PositionRotation(Phase2.mc.player.posX + motion4[0], Phase2.mc.player.posY - 0.1, Phase2.mc.player.posZ + motion4[1], Phase2.mc.player.rotationYaw, Phase2.mc.player.rotationPitch, false));
                }
                else {
                    Phase2.mc.player.connection.sendPacket(new CPacketPlayer.PositionRotation(Phase2.mc.player.posX + motion4[0], Phase2.mc.player.posY, Phase2.mc.player.posZ + motion4[1], Phase2.mc.player.rotationYaw, Phase2.mc.player.rotationPitch, false));
                }
                if (this.noClipMode.getValue() == NoClipMode.Fall) {
                    Phase2.mc.player.connection.sendPacket(new CPacketPlayer.PositionRotation(Phase2.mc.player.posX, -1300.0, Phase2.mc.player.posZ, Phase2.mc.player.rotationYaw * -5.0f, Phase2.mc.player.rotationPitch * -5.0f, true));
                }
                if (this.noClipMode.getValue() == NoClipMode.NoClip) {
                    Phase2.mc.player.setVelocity(0.0, 0.0, 0.0);
                    if (Phase2.mc.gameSettings.keyBindForward.isKeyDown() || Phase2.mc.gameSettings.keyBindBack.isKeyDown() || Phase2.mc.gameSettings.keyBindLeft.isKeyDown() || Phase2.mc.gameSettings.keyBindRight.isKeyDown()) {
                        final double[] directionSpeed5 = MathUtil.directionSpeed(0.05999999865889549);
                        Phase2.mc.player.connection.sendPacket(new CPacketPlayer.Position(Phase2.mc.player.posX + directionSpeed5[0], Phase2.mc.player.posY, Phase2.mc.player.posZ + directionSpeed5[1], Phase2.mc.player.onGround));
                        Phase2.mc.player.connection.sendPacket(new CPacketPlayer.Position(Phase2.mc.player.posX, 0.0, Phase2.mc.player.posZ, Phase2.mc.player.onGround));
                    }
                    if (Phase2.mc.gameSettings.keyBindSneak.isKeyDown()) {
                        Phase2.mc.player.connection.sendPacket(new CPacketPlayer.Position(Phase2.mc.player.posX, Phase2.mc.player.posY - 0.05999999865889549, Phase2.mc.player.posZ, Phase2.mc.player.onGround));
                        Phase2.mc.player.connection.sendPacket(new CPacketPlayer.Position(Phase2.mc.player.posX, 0.0, Phase2.mc.player.posZ, Phase2.mc.player.onGround));
                    }
                    if (Phase2.mc.gameSettings.keyBindJump.isKeyDown()) {
                        Phase2.mc.player.connection.sendPacket(new CPacketPlayer.Position(Phase2.mc.player.posX, Phase2.mc.player.posY + 0.05999999865889549, Phase2.mc.player.posZ, Phase2.mc.player.onGround));
                        Phase2.mc.player.connection.sendPacket(new CPacketPlayer.Position(Phase2.mc.player.posX, 0.0, Phase2.mc.player.posZ, Phase2.mc.player.onGround));
                    }
                }
                if (this.noClipMode.getValue() == NoClipMode.Bypass) {
                    Phase2.mc.player.noClip = true;
                }
                if (this.fallPacket.getValue()) {
                    Phase2.mc.player.connection.sendPacket(new CPacketEntityAction(Phase2.mc.player, CPacketEntityAction.Action.STOP_RIDING_JUMP));
                }
                if (this.sprintPacket.getValue()) {
                    Phase2.mc.player.connection.sendPacket(new CPacketEntityAction(Phase2.mc.player, CPacketEntityAction.Action.START_SPRINTING));
                }
                if (this.downOnShift.getValue() && Phase2.mc.player.collidedVertically && Phase2.mc.gameSettings.keyBindSneak.isKeyDown()) {
                    Phase2.mc.player.setPosition(Phase2.mc.player.posX + motion4[0], Phase2.mc.player.posY - 0.1, Phase2.mc.player.posZ + motion4[1]);
                }
                else {
                    Phase2.mc.player.setPosition(Phase2.mc.player.posX + motion4[0], Phase2.mc.player.posY, Phase2.mc.player.posZ + motion4[1]);
                }
                Phase2.mc.player.motionZ = 0.0;
                Phase2.mc.player.motionY = 0.0;
                Phase2.mc.player.motionX = 0.0;
                Phase2.mc.player.noClip = true;
                this.delay = 0;
                return;
            }
            if (this.instantWalk.getValue()) {
                final double[] directionSpeed6 = MathUtil.directionSpeed(n2);
                Phase2.mc.player.motionX = directionSpeed6[0];
                Phase2.mc.player.motionZ = directionSpeed6[1];
            }
        }
    }

    public BlockPos getPlayerPos() {
        return new BlockPos(Math.floor(Anchor.mc.player.posX), Math.floor(Anchor.mc.player.posY), Math.floor(Anchor.mc.player.posZ));
    }

    private double[] getMotion(final double n) {
        float moveForward = Phase2.mc.player.movementInput.moveForward;
        float moveStrafe = Phase2.mc.player.movementInput.moveStrafe;
        float n2 = Phase2.mc.player.prevRotationYaw + (Phase2.mc.player.rotationYaw - Phase2.mc.player.prevRotationYaw) * Phase2.mc.getRenderPartialTicks();
        if (moveForward != 0.0f) {
            if (moveStrafe > 0.0f) {
                n2 += ((moveForward > 0.0f) ? -45 : 45);
            }
            else if (moveStrafe < 0.0f) {
                n2 += ((moveForward > 0.0f) ? 45 : -45);
            }
            moveStrafe = 0.0f;
            if (moveForward > 0.0f) {
                moveForward = 1.0f;
            }
            else if (moveForward < 0.0f) {
                moveForward = -1.0f;
            }
        }
        return new double[] { moveForward * n * -Math.sin(Math.toRadians(n2)) + moveStrafe * n * Math.cos(Math.toRadians(n2)), moveForward * n * Math.cos(Math.toRadians(n2)) - moveStrafe * n * -Math.sin(Math.toRadians(n2)) };
    }

    @Override
    public void onDisable() {
        Phase2.mc.player.noClip = false;
    }

    private boolean eChestCheck() {
        return String.valueOf(Phase2.mc.player.posY).split("\\.")[1].equals("875");
    }

    private boolean new1(final Integer n) {
        return this.stopMotion.getValue();
    }

    private boolean new0(final Double n) {
        return this.instantWalk.getValue();
    }

    public enum NoClipMode
    {
        NoClip,
        Fall,
        Bypass,
        None;

        private static final NoClipMode[] $VALUES;

        static {
            $VALUES = new NoClipMode[] { NoClipMode.NoClip, NoClipMode.Fall, NoClipMode.Bypass, NoClipMode.None };
        }
    }
}
 